# -*- coding: utf-8 -*-
"""
Created on Wed Nov  6 15:00:40 2019

This script compares fractal generated by l2 norm selection and square

@author: marlo
"""
import sys
# insert at 1, 0 is the script path (or '' in REPL)
sys.path.insert(0, './fareyFunctions')

from phantominator import shepp_logan
import numpy as np
import matplotlib.pylab as plt
from fareyFractal import farey_fractal, normalizer
import finite

from PIL import Image
from makeRandomFractal import makeRandomFractal
import scipy.fftpack as fftpack
import pyfftw
from matplotlib.pyplot import cm
# Monkey patch in fftn and ifftn from pyfftw.interfaces.scipy_fftpack
fftpack.fft2 = pyfftw.interfaces.scipy_fftpack.fft2
fftpack.ifft2 = pyfftw.interfaces.scipy_fftpack.ifft2
fftpack.fft = pyfftw.interfaces.scipy_fftpack.fft
fftpack.ifft = pyfftw.interfaces.scipy_fftpack.ifft

# Turn on the cache for optimum performance
pyfftw.interfaces.cache.enable()

N = 257
# Generate Phantom
ph = np.flipud(shepp_logan(N))
plt.imshow(ph)
im = Image.fromarray(np.abs((ph * 255 / np.max(np.abs(ph)))).astype(np.uint8))
im.save("fractal_cs_graph/" + "phantom" + '.png')

# Generate Shakes' fractal
K = 2.3

#-------------------------------
#compute lines
centered = False
random = True
R = 8
tilingSize=6
if R == 2:
    fareyOrder = 10
    K = 2.4
elif R == 3:
    fareyOrder = 8
    K = 1.3
elif R == 4:
    fareyOrder = 7
    K = 0.88
    tilingSize=10
elif R == 8:
    fareyOrder = 5
    K = 0.3
    tilingSize=11

# Generate the fractal
# lines, angles, mValues, fractalMine, _, oversampleFilter = farey_fractal(N, fareyOrder, centered=centered)
# Setup fractal
if not random:
    lines, angles, \
        mValues, fractalMine, \
        oversampleFilter = finite.finiteFractal(N, K, sortBy='Euclidean', 
                                            twoQuads=True)
    lines = np.array(lines)
else:
    fractalMine, oversampleFilter, mValues, lines = makeRandomFractal(N, (1/R), tilingSize=0, withTiling=False, test=True)
    lines = np.array(lines)
    # oversampleFilter = fftpack.ifftshift(oversampleFilter)
    
print("Actual R: ", np.sum(fractalMine)/N**2)
    
# fractal = fftpack.fftshift(fractal)
plt.figure(2)
plt.imshow(np.abs(fftpack.fftshift(fractalMine)))
im = Image.fromarray(np.abs(fftpack.fftshift(fractalMine * 255 / np.max(np.abs(fractalMine)))).astype(np.uint8))
im.save("fractal_cs_graph/" + "fractal" + '.png')

# Get artefacts from shakes'
fftImageSlice = fftpack.fft2(ph)
artefactFFT = fftImageSlice * fractalMine
artefactImage = np.abs(fftpack.ifft2(artefactFFT))

plt.figure(4)
plt.imshow(artefactImage)
im = Image.fromarray(np.abs(artefactImage * 255 / np.max(np.abs(artefactImage))).astype(np.uint8))
im.save("fractal_cs_graph/" + "artefactImage" + '.png')

plt.figure(5)
a = np.log10(fftpack.fftshift(fftImageSlice))
plt.imshow(np.abs(a))
im = Image.fromarray(np.abs(a * 255 / np.max(np.abs(a))).astype(np.uint8))
im.save("fractal_cs_graph/" + "FFT" + '.png')

plt.figure(6)
logFFT = np.log10(fftpack.fftshift(artefactFFT+1))
plt.imshow(np.abs(logFFT))
im = Image.fromarray(np.abs(logFFT * 255 / np.max(np.abs(logFFT))).astype(np.uint8))
im.save("fractal_cs_graph/" + "logFFT" + '.png')

testdrtSpace = finite.frt_complex(ph, N)
plt.figure(7)
plt.imshow(np.abs(testdrtSpace))
im = Image.fromarray(np.abs(testdrtSpace * 255 / np.max(np.abs(testdrtSpace))).astype(np.uint8))
im.save("fractal_cs_graph/" + "drtSpace" + '.png')

artefactdrtSpace = finite.frt_complex(ph, N, mValues=mValues, center=False)
artefactDRT = artefactdrtSpace
plt.figure(8)
plt.imshow(np.abs(artefactdrtSpace))
im = Image.fromarray(np.abs(artefactDRT * 255 / np.max(np.abs(testdrtSpace))).astype(np.uint8))
im.save("fractal_cs_graph/" + "artefactDRT" + '.png')

maxLines = 0
for line in lines:
    maxLines += 1

artefactImageDRT = finite.ifrt_complex(artefactdrtSpace, N, center = False, mValues=mValues, oversampleFilter=oversampleFilter)
plt.figure(9)
plt.imshow(np.abs(artefactImageDRT))

drtMask = np.zeros((258, 1))
drtMask[mValues] = 255
drtMask = np.repeat(drtMask, 257, axis=1)
fig = plt.figure(20, figsize=(10,10))
plt.tight_layout()
plt.gray()
plt.axis('off')
plt.margins(0,0)
plt.gca().xaxis.set_major_locator(plt.NullLocator())
plt.gca().yaxis.set_major_locator(plt.NullLocator())
plt.imshow(drtMask)
color=iter(cm.jet(np.linspace(0,1,maxLines+1)))
for i, m in enumerate(mValues):
    c=next(color)
    plt.plot(np.array(range(0, 257)), np.ones((257, 1)) * m, 's', c=c, markersize=2)
    if i == maxLines:
        break
fig.savefig("fractal_cs_graph/drtMasking.png", bbox_inches='tight', pad_inches=0)
im = Image.fromarray(drtMask.astype(np.uint8))
im.save("fractal_cs_graph/drtMask.png")

plt.figure(10)
oversampleFilter -= 1
plt.imshow(fftpack.fftshift((np.abs(oversampleFilter))))
im = Image.fromarray(np.abs(fftpack.fftshift(oversampleFilter) * 255 / np.max(np.abs(oversampleFilter))).astype(np.uint8))
im.save("fractal_cs_graph/" + "oversample" + '.png')


fig = plt.figure(11, figsize=(16, 16))
plt.tight_layout()
plt.gray()
plt.axis('off')
plt.margins(0,0)
plt.gca().xaxis.set_major_locator(plt.NullLocator())
plt.gca().yaxis.set_major_locator(plt.NullLocator())
#plot slices responsible for reconstruction 



plt.imshow(fractalMine.T)
# ax[1].imshow(fractalMine)

color=iter(cm.jet(np.linspace(0,1,maxLines+1)))
fareyImage = np.zeros_like(fractalMine)
for i, line in enumerate(lines):
    u, v = line
    c=next(color)
    plt.plot(u, v, '.', c=c, markersize=5)
    fareyImage[u,v] = 255
    if i == maxLines:
        break
fig.savefig("fractal_cs_graph/lines.png", bbox_inches='tight', pad_inches=0)
im = Image.open("fractal_cs_graph/lines.png")
im = np.array(im)
for ch in range(0, 3):
    im[:, :, ch] = fftpack.fftshift(im[:, :, ch])
    
im = Image.fromarray(np.abs(im).astype(np.uint8))
im.save("fractal_cs_graph/lines.png")
# plt.set_title('Sampling (colour per line) for prime size:'+str(N))
