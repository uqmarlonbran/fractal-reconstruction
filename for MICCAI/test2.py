# -*- coding: utf-8 -*-
"""
Created on Wed Nov  6 15:00:40 2019

This script compares fractal generated by l2 norm selection and square

@author: marlo
"""
import sys
# insert at 1, 0 is the script path (or '' in REPL)
sys.path.insert(0, './fareyFunctions')

from phantominator import shepp_logan
import numpy as np
import matplotlib.pylab as plt
from fareyFractal import farey_fractal, normalizer
import finite



import scipy.fftpack as fftpack
import pyfftw

# Monkey patch in fftn and ifftn from pyfftw.interfaces.scipy_fftpack
fftpack.fft2 = pyfftw.interfaces.scipy_fftpack.fft2
fftpack.ifft2 = pyfftw.interfaces.scipy_fftpack.ifft2
fftpack.fft = pyfftw.interfaces.scipy_fftpack.fft
fftpack.ifft = pyfftw.interfaces.scipy_fftpack.ifft

# Turn on the cache for optimum performance
pyfftw.interfaces.cache.enable()

N = 256
# Generate Phantom
ph = shepp_logan(N)
plt.imshow(ph)

# Generate Shakes' fractal
K = 2.3

# Setup fractal
lines, angles, \
    mValues, fractal, \
    oversampling = finite.finiteFractal(N, K, sortBy='Euclidean', 
                                        twoQuads=True)
    
# Setup fractal
lines, angles, \
    mValues, fractal2, \
    oversampling = finite.finiteFractal(N, K, sortBy='Manhattan', 
                                        twoQuads=True)
    
# fractal = fftpack.fftshift(fractal)
R = np.sum(np.sum(fractal)) / (N * N)
print("Reduction factor shakes: ", R)
plt.figure(2)
plt.imshow(np.abs(fractal))

# Generate my fractal
lines2, angles, mValues, fractalMine, R, oversampleFilter = farey_fractal(N, 10, centered=True)
print("Reduction factor marlon: ", R)
plt.figure(3)
plt.imshow(fractalMine)

plt.figure(1)
plt.imshow(fractal2)

# Get artefacts from shakes'
fftImageSlice = fftpack.fft2(ph)
artefactImageShakes = fftImageSlice * fractal
artefactImageShakes = np.abs(fftpack.ifft2(artefactImageShakes))

# arefactImageShakes = normalizer(artefactImageShakes)

plt.figure(4)
plt.imshow(artefactImageShakes)
output_path = "circle.png"
plt.savefig(output_path)

# Get artefacts from mine
fftImageSlice = fftpack.fft2(ph)
artefactImageMarlon = fftImageSlice * fractalMine
artefactImageMarlon = np.abs(fftpack.ifft2(artefactImageMarlon))

# arefactImageMarlon = normalizer(artefactImageMarlon)

plt.figure(5)
plt.imshow(artefactImageMarlon)
output_path = "square.png"
plt.savefig(output_path)

artefactImageDiamond = fftImageSlice * fractal2
artefactImageDiamond = np.abs(fftpack.ifft2(artefactImageDiamond))

plt.figure(6)
plt.imshow(artefactImageDiamond)
output_path = "diamond.png"
plt.savefig(output_path)




testdrtSpace = finite.frt_complex(ph, N)
plt.figure(7)
plt.imshow(np.abs(testdrtSpace))
output_path = "drt.png"
plt.savefig(output_path)


newdrtSpace = np.zeros_like(testdrtSpace)
newdrtSpace[mValues, :] = testdrtSpace[mValues, :]
plt.figure(8)
plt.imshow(np.abs(newdrtSpace))
output_path = "new_drt.png"
plt.savefig(output_path)

plt.figure(9)
plt.imshow(np.abs(ph))
output_path = "phantom.png"
plt.savefig(output_path)
